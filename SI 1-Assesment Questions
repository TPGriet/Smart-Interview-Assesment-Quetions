1. Concatenate Array
---------------------------
Given an integer array A of size N. You have to construct a new B array with a length of (N+N). 
For each index i from 0 to N-1, the value of B[i] should be the same as the value of A[i], and the value of B[i+N] should also be the same as the value of A[i].
In simple terms, you have to duplicate the A array and place them consecutively in the B array two times.

Input Format:
The first line of input contains the N - the size of the array A. The next line contains N integers of array A.
Output Format:
Print the elements of the B array separated by space.

Constraints:
---------------------
1 <= N <= 1000
1 <= A[i] <= 1000

Test case Example:
------------------------------
Input
3
6 7 7

Output
6 7 7 6 7 7

Explanation
Self Explanatory

PROGRAM:
-----------------------
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        int[] b = new int[n*2];
        for(int i=0;i<a.length;i++){
            a[i] = sc.nextInt();
            b[i] = b[i+n] = a[i];
        }
        
        for(int i: b) System.out.print(i+" ");
    }
}


2. Unique Elements
-------------------------
Print unique elements of the array in the same order as they appear in the input.
Note:
Do not use any inbuilt functions / libraries for your main logic.

Input Format:
The first line of input contains the size of the array - N and the second line contains the elements of the array.

Output Format:
Print unique elements from the given array.

Constraints:
------------------
1 <= N <= 100
0 <= ar[i] <= 109

TEST CASE EXAMPLE:
---------------------
Input:
7
5 4 10 9 21 4 10

Output:
5 9 21

PROGRAM:
-----------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Map<Integer,Integer> map = new LinkedHashMap<>();

        for(int i=0;i<n;i++){
            int x = sc.nextInt();
            if(map.containsKey(x)) map.put(x, map.get(x)+1);
            else map.put(x,1);
        }

        for(int x : map.keySet()){
            if(map.get(x) == 1) System.out.print(x+" ");
        }
    }
}

3. Reverse Array
-------------------------
Print the array in reverse order.

Note:
Try solving this using recursion. Do not use any inbuilt functions / libraries for your main logic.

Input Format:
The first line of input contains N - the size of the array and the second line contains the elements of the array.

Output Format:
Print the given array in reverse order.

Constraints:
1 <= N <= 100
0 <= ar[i] <= 1000


TEST CASE EXAMPLE:
--------------------
Input:
5
2 19 8 15 4

Output:
4 15 8 19 2

PROGRAM:
-------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for(int i=0;i<n;i++){
            a[i] = sc.nextInt();
        }

        for(int i=n-1;i>=0;i--){
            System.out.print(a[i]+" ");
        }
    }
}

4. Odd Elements Sum
---------------------------------
Print the sum of all odd elements in an array.

Input Format
The first line of input contains N - the size of the array and the second line contains array elements.

Output Format:
Print the sum of all odd elements of the given array.

Constraints:
1 <= N <= 103
-106 <= ar[i] <= 106


TEST CASE EXAMPLE:
--------------------
Input:
5
-6 9 -8 4 -3

Output:
6

Explanation:
9 + (-3) = 6

PROGRAM:
------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        int sum = 0;
        for(int i=0;i<n;i++){
            arr[i] = sc.nextInt();
            if(arr[i]%2!=0) sum+=arr[i];
        }
        System.out.println(sum);

    }
}

5. Find Duplicate Number in Array
-----------------------------
Find a duplicate element in the given array of integers. There will be only a single duplicate element in the array.

Note:
Do not use any inbuilt functions / libraries for your main logic

Input Format
The first line of input contains the size of the array - N and the second line contains the elements of the array, there will be only a single duplicate element in the array.

Output Format
Print the duplicate element from the given array.

Constraints:
2 <= N <= 100
0 <= ar[i] <= 109

TEST CASE EXAMPLE:
----------------------
Input:
6
5 4 10 9 21 10

Output:
10

Explanation
Self Explanatory

PROGRAM:
--------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Map<Integer,Integer> map = new HashMap<>();
        for(int i = 0;i<n;i++){
            int x = sc.nextInt();
            if(map.containsKey(x)) map.put(x,map.get(x)+1);
            else map.put(x,1);
        }

        for(int i: map.keySet()){
            if(map.get(i)>1){
                System.out.println(i);
            }
        }
    }
}

6. Longest Contiguous 1's
---------------------------------
Given an array of elements containing 0's and 1's. You have to find the length of longest contiguous 1's.

Input Format:
First line of input contains N - size of the array. The next line contains the N integers of array A.

Output Format:
Print the length of longest contiguous 1's.

Constraints
1 <= N <= 1000

TEST CASE EXAMPLE:
----------------------------
Input:
10
1 0 0 1 0 1 1 1 1 0

Output:
4

Explanation
Self Explanatory

PROGRAM:
--------------------
import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        int maxCount = 0,c=0;
        for(int i=0;i<n;i++){
            arr[i] = sc.nextInt();
            if(arr[i]==1){
                c++;
            }else{
                maxCount = Math.max(maxCount,c);
                c=0;
            }
        }
        maxCount = Math.max(maxCount,c);
        System.out.println(maxCount);

    }
}

7. Max Altitude
-------------------------------
Imagine a pilot starting the flight from the ground and flying over a series of different points at different heights.
You are given an array, where A[i] represents heights.
Currently, if the pilot is at altitude X at ith point, and if he wants to reach (i+1)th point, his altitude will become X+A[i].
The pilot starts at altitude 0 and wants to find the highest point he can reach during the entire journey. 
Your task is to print the highest altitude the pilot reaches.

Input Format:
The first line of input contains an integer N. The second line of input contains N space-separated integers.

Output Format:
Print the highest altitude the pilot can reach.

Constraints
1 <= N <= 1000
-1000 <= A[i] <= 1000

TEST CASE EXAMPLE:
--------------------------
Input:
5
-5 1 5 0 -7

Output:
1

Explanation:
When the pilot started at point 0 his altitude was -5, when he moved to point 1 his altitude became (-5 + 1 = -4), at point 2 his altitude became(-4 + 5 = 1), at point 3
his became altitude remains(1 + 0 = 1), and at point 4 his altitude became (1 + -7 = -6). The maximum altitude that he reached in his journey was 1.

PROGRAM:
--------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];

        for(int i=0;i<n;i++){
            arr[i] = sc.nextInt();
        }

        int sum = arr[0], maxSum = arr[0];
        for(int i=1;i<n;i++){
            sum+=arr[i];
            maxSum = Math.max(sum,maxSum);
             
        }

        // maxSum = Math.max(maxSum,sum);
        System.out.println(maxSum);
    }
}


8.  Left Sum and Right Sum
----------------------------------------
Given an array A of size N. Construct an array B, such that B[i] is calculated as follows:

Find leftSum => sum of elements to the left of index i in array A; if none, use 0.
Find rightSum => sum of elements to the right of index i in array A; if none, use 0.
B[i] = | leftSum - rightSum |
Your task is to simply print the B array.

Input Format:
The first line of input contains the N - size of the array. The next line contains N integers - the elements of array A.

Output Format:
Print the elements of the B array separated by space.

Constraints:
1 <= N <= 100
0 <= arr[i] <= 100000

TEST CASE EXAMPLE:
---------------------------
Input:
3
6 7 7

Output:
14 1 13

Explanation:
At index 0:
LeftSum = 0, RightSum = 14
B[0] = | LeftSum - RightSum | = 14.

At index 1:
LeftSum = 6, RightSum = 7
B[1] = | LeftSum - RightSum | = 1.

At index 2:
LeftSum = 13, RightSum = 0
B[2] = | LeftSum - RightSum | = 13.

PROGRAM:
------------------------------------
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        int sum = 0;
        for(int i=0;i<n;i++){
            arr[i] = sc.nextInt();
            sum += arr[i];
        }

        int leftSum = 0, rightSum = 0;

        for(int i=0;i<n;i++){
            rightSum = sum - leftSum - arr[i];
            System.out.print(Math.abs(leftSum - rightSum)+" ");
            leftSum+=arr[i];
        }
    }
}

9. Matrix Row Sum
------------------------------------
Given a matrix of size N x M, print row-wise sum, separated by a newline.

Note:
Try to solve this without declaring / storing the matrix.

Input Format:
The first line of input contains N, M - the size of the matrix, followed by N lines each containing M integers - elements of the matrix.

Output Format:
Print the row-wise sum of the matrix, separated by a newline.

Constraints:
1 <= N, M <= 100
-109 <= ar[i] <= 109

TEST CASE EXAMPLE:
------------------------
Input
2 3
5 -1 3
19 8 -5

Output:
7
22

Explanation:
Self Explanatory

PROGRAM:
--------------------------
PYTHON:
------------------------
[n,m] = [int(x) for x in input().split()]

sums = [0]*n

for i in range(n):
    row = [int(x) for x in input().split()]
    sums[i] = sum(row)

for i in sums:
    print(i)

10. Matrix Column Sum
------------------
Given a matrix of size N x M, print column-wise sum, separated by a newline.

Input Format:
The first line of input contains N, M - the size of the matrix, followed by N lines each containing M integers - elements of the matrix.

Output Format:
Print the column-wise sum of the matrix, separated by newline.

Constraints:
1 <= N, M <= 100
-109 <= ar[i] <= 109

TEST CASE EXAMPLE:
----------------------
Input:
2 2
5 -1
19 8

Output:
24
7

Explanation
Self Explanatory

PROGRAM:
-------------------------------
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Prlong output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();

        long[][] arr = new long[n][m];

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                arr[i][j] = sc.nextLong();
            }
        }

        for(int j=0;j<m;j++){
            long sum = 0;
            for(int i=0;i<n;i++){
                sum+=arr[i][j];
            }
            System.out.println(sum);
        }

    }
}

11. Sum of Two Matrices
-----------------------------------
Given two matrices A and B each of size N x M, print the sum of the matrices (A + B).

Note:
Try solving it by declaring only a single matrix.

Input Format:
The first line of input contains N, M - the size of the matrices. It's followed by 2*N lines, each containing M integers - elements of the matrices.
The first N lines are for matrix A and the next N lines are for matrix B.

Output Format:
Print the sum of the 2 given matrices (A + B).

Constraints:
1 <= N, M <= 100
-109 <= ar[i] <= 109

TEST CASE EXAMPLE:
-------------------------------
Input:
2 3
5 -1 3
19 8 4
4 5 -6
1 -2 12

Output:
9 4 -3
20 6 16

Explanation
Self Explanatory

PROGRAM:
-----------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();

        int[][] arr = new int[n][m];

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                arr[i][j] = sc.nextInt();
            }
        }

        for(int i=0;i<n;i++){
            int sum = 0;
            for(int j=0;j<m;j++){
                sum = arr[i][j];
                arr[i][j] = sc.nextInt();
                sum += arr[i][j];
                System.out.print(sum+" ");
            }
            System.out.println();
        }


    }
}


12. Interchange Diagonals
------------------------------------
Given a matrix A of size NxN, interchange the diagonal elements from top to bottom and print the resultant matrix.

Input Format:
First line of input contains N - the size of the matrix. It is followed by N lines each containing N integers - elements of the matrix.

Output Format:
Print the matrix after interchanging the diagonals.

Constraints:
1 <= N <= 100
1 <= A[i][j] <= 104

TEST CASE EXAMPLE:
------------------------
Input:
4
1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16

Output:
4 2 3 1
5 7 6 8
9 11 10 12
16 14 15 13

Explanation:
Self Explanatory

PROGRAM:
-------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        int[][] arr = new int[n][n];

        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                arr[i][j] = sc.nextInt();
            }
        }

        for(int i=0;i<n;i++){
            int x = arr[i][i];
            arr[i][i] = arr[i][n-i-1];
            arr[i][n-i-1] = x;
        }

        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
    }
}

13. Matrix Zig-Zag Traversal
-------------------------------
Given a matrix of size N x M, print the matrix in zig-zag order. Refer example for more details.

Input Format:
The first line of input contains N, M - the size of the matrix. It is followed by N lines each containing M integers - elements of the matrix.

Output Format:
Print the matrix elements in zig-zag order.

Constraints:
1 <= N, M <= 100
-106 <= mat[i][j] <= 106

TEST CASE EXAMPLE:
--------------------
Input:
3 3
5 9 -2
-3 4 1
2 6 1

Output:
5 9 -2 1 4 -3 2 6 1

Explanation:
Self Explanatory

PROGRAM:
------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] arr = new int[n][m];

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                arr[i][j] = sc.nextInt();
            }
        }

        for(int i=0;i<n;i++){
            int k = i%2 == 0? 0 : arr[i].length - 1;
            for(int j = 0;j<m;j++){
                System.out.print(arr[i][k] + " ");
                if(i%2 == 0)k++;
                else k--;
            }
            // System.out.println()
        }

    }
}

14.  Transpose Matrix
-------------------------------------
Given a matrix of size N x M, print the transpose of the matrix.

Input Format:
The first line of input contains N, M - the size of the matrix. It is followed by N lines each containing M integers - elements of the matrix.

Output Format:
Print the transpose of the given matrix.

Constraints:
1 <= N, M <= 100
-109 <= ar[i] <= 109

TEST CASE EXAMPLE:
---------------------------
Input:
2 2
5 -1
19 8

Output:
5 19
-1 8

Explanation
Self Explanatory

PROGRAM:
------------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] arr = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                arr[i][j] = sc.nextInt();
            }
        }

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                System.out.print(arr[j][i]+" ");
            }
            System.out.println();
        }

        
    }
}

15. Sparse Matrix
------------------------------
Given a matrix of size N x M, print whether it is a sparse matrix or not.
Please note that if a matrix contains 0 in more than half of its cells, then it is called a sparse matrix.

Input Format:
The first line of input contains N, M - the size of the matrix, followed by N lines each containing M integers - elements of the matrix.

Output Format:
Print "Yes" if the given matrix is a sparse matrix, otherwise print "No".

Constraints:
1 <= N, M <= 100
0 <= ar[i] <= 109

TEST CASE EXAMPLE:
--------------------------
Input:
2 3
5 0 0
0 8 0

Output:
Yes

Explanation:
Self Explanatory

PROGRAM:
-------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();

        int[][] arr = new int[n][m];
        int z = 0;
        for(int i=0;i<n;i++){
            for(int j = 0;j<m;j++){
                arr[i][j] = sc.nextInt();
                if(arr[i][j] == 0) z++;
            }
        }

        if(z > (n*m)/2) System.out.println("Yes");
        else System.out.println("No");
    }
}

16. Zero Row and Zero Column
-------------------------------
Given a matrix A of size N x M. Elements of the matrix are either 0 or 1. 
If A[i][j] = 0, set all the elements in the ith row and jth column to 0. Print the resultant matrix.

Input Format:
The first line of input contains N, M - the size of the matrix A. It is followed by N lines each containing M integers - elements of the matrix.

Output Format:
Print the resultant matrix.

Constraints:
1 <= N, M <= 100
A[i][j] ∈ {0,1}

TEST CASE EXAMPLE:
-----------------------------
Input:
4 5
0 1 1 0 1 
1 1 1 1 1 
1 1 0 1 1 
1 1 1 1 1 

Output:
0 0 0 0 0 
0 1 0 0 1 
0 0 0 0 0 
0 1 0 0 1 

Explanation:
Self Explanatory

PROGRAM:
----------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] res = new int[n][m];
        int[][] arr = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                arr[i][j] = sc.nextInt();
            }
        }

        for(int[] i: res) Arrays.fill(i,1);
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(arr[i][j]==0) setZeroes(res,i,j);
            }
        }

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                System.out.print(res[i][j]+" ");
            }
            System.out.println();
        }
    }

    public static void setZeroes(int[][] arr,int i,int j){
        for(int k=0;k<arr[i].length;k++){
            arr[i][k] = 0;
        }

        for(int k = 0; k<arr.length;k++){
            arr[k][j] = 0;
        }
    }
}

17. Image Flip
---------------------------------
You are given an N x M binary matrix called "image". You need to perform the following operations on the matrix (in order) and return the resulting image:

Flip the image horizontally: This involves reversing the order of elements in each row of the matrix. For example, [1,0,1,0,0,0] becomes [0,0,0,1,0,1]
Invert the image: This involves replacing 0s with 1s and 1s with 0s in the entire matrix. For example, [0,0,0,1,0,1] becomes [1,1,1,0,1,0]

Input Format:
Line of input contains N - number of rows and M - number of columns. The next N lines contains M integers each denoting the elements of the matrix image.

Output Format:
You have to print the resultant matrix image.

Constraints:
1 <= N <=100
1 <= M <=100

TEST CASE EXAMPLE:
----------------------------------
Input:
2 2
1 0
0 1

Output:
1 0
0 1

Explanation:
Self Explanatory

PROGRAM:
--------------------------
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */

        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();

        int[][] arr = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                arr[i][j] = sc.nextInt();
            }
        }

        for(int[] i : arr){
            revArr(i);
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(arr[i][j] == 0) arr[i][j] = 1;
                else arr[i][j] = 0;
            }
        }

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
    }

    public static void revArr(int[] arr){
        int[] res = new int[arr.length];
        int k = 0;
        for(int i = arr.length-1;i>=0;i--) res[k++] = arr[i];
        for(int i = 0;i<arr.length;i++) arr[i] = res[i];
 
    }
}

18. Check Bit
------------------------------------------
Given an integer N, check whether the ith bit is set or not.

Input Format:
The first and only line of input contains N and i.

Output Format:
Print "true" if the ith bit is set in the given integer N, "false" otherwise.

Constraints:
0 <= N <= 109
0 <= i <= 30

TEST CASE EXAMPLE:
------------------------------
Input
10 1

Output:
true

Explanation
The binary form of 10 is `1010`. So, the 1st bit in 10 is set. Note that the LSB bit is referred to as the 0th bit.

PROGRAM:
--------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int i = sc.nextInt();
        int x = 1<<i;
        System.out.println((n&x)!=0);

    }
}

19. Digits Sum
----------------------------------
Given a non-negative integer - N, print the sum of digits of the given number.

Input Format:
The first and only line of input contains a non-negative integer N.

Output Format:
Print the sum of the digits of the given number.

Constraints:
1 <= length(N) <= 103

TEST CASE EXAMPLE:
--------------------------
Input:
164

Output:
11

Explanation:
1 + 6 + 4 = 11

PROGRAM:
---------------------------
import java.io.*;
import java.util.*;
import java.math.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
       String n = sc.nextLine();
        BigInteger n1 = new BigInteger(""+n);
        BigInteger sum = new BigInteger("0");
        while(!(""+n1).equals("0")){
            String str = ""+n1;
            BigInteger x = new BigInteger(""+str.charAt(str.length() - 1));
           sum= sum.add(x);
            n1=n1.divide(BigInteger.valueOf(10));
           // System.out.println(n1);
        }
        System.out.println(sum);
    }
}

20. Triangle Validator
-----------------------------------
Given the length of 3 sides of a triangle, check whether the triangle is valid or not.

Input Format:
The first and only line of input contains three integers A, B, C - Sides of the triangle.

Output Format:
Print "Yes" if you can construct a triangle with the given three sides, "No" otherwise.

Constraints:
1 <= A, B, C <= 109

TEST CASE EXAMPLE:
------------------------------
Input:
4 3 5

Output:
Yes

Explanation:
Self Explanatory

PROGRAM:
----------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();

        if(a+b>c && a+c>b && b+c>a) System.out.println("Yes");
        else System.out.println("No");
    }
}

21. Compute A power B
------------------------------
Given two integers A and B, compute A power B.

Note: Do not use any inbuilt functions / libraries for your main logic.
Input Format:
The first and only line of input contains two positive integers A and B.

Output Format:
Print A power B.

Constraints:
1 <= A <= 100
0 <= B <= 9

TEST CASE EXAMPLE:
-------------------------
Input:
2 3

Output:
8

Explanation:
Self Explanatory

PROGRAM:
------------------------------
PYTHON:
--------------
a,b = map(int,input().split())
print(a**b)

22. The Missing Number
------------------------------------------
Find the missing number in the given list of integers. The list contains 1 to 100 integers but one of the integer is missing. There are no duplicates in the list.

Input Format:
Input contains a list of 99 integers.

Output Format:
Print the missing number in the list.

Constraints:
1 <= L[i] <= 100

TEST CASE EXAMPLE:
------------------------------
Input:
12 15 9 1 71 77 81 29 70 19 11 83 56 2 57 53 68 99 82 100 22 10 51 40 34 98 80 38 39 89 94 4 26 64 45 8 90 24 93 33 21 7 49 88 
5 28 55 67 65 50 32 58 6 37 46 42 20 44 41 3 78 76 73 16 31 85 91 54 60 47 97 43 84 17 35 69 13 30 61 79 72 48 23 66 52 27 62 87 63 18 75 96 14 86 95 74 25 59 36

Output:
92

Explanation:
Self Explanatory

PROGRAM:
------------------------------
PYTOHN:
--------------------
lis = [int(x) for x in input().split()]
print(100 - (sum(lis) -4950))

23. Factorial
---------------------------------
Given a non-negative number - N. Print N!

Input Format:
The first and only line of input contains a number - N.

Output Format:
Print factorial of N.

Constraints:
0 <= N <= 10

TEST CASE EXAMPLE:
--------------------------
Input:
5

Output:
120

Explanation:
Self Explanatory

PROGRAM:
-------------------------------
PYTHON:
--------------------
import math
n = int(input())
print(math.factorial(n))

24. Factorial Hard
------------------------------------------------------
Given a non-negative number - N. Print N!

Input Format:
The first and only line of input contains a number - N.

Output Format:
Print factorial of N. Since the result can be very large, print result % 1000000007

Constraints:
0 <= N <= 106

TEST CASE EXAMPLE:
-----------------------
Input 1:
3

Output 1:
6

Input 2:
165

Output 2:
﻿994387759

Explanation:
Self Explanatory

PROGRAM:
--------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        long fact = 1;
        while(n>0){
            fact = (fact*n)%1000000007;
            n--;
        }

        System.out.println(fact);
    }
}

25. Fibonacci Number
------------------------------------
For a given positive integer - N, compute Nth Fibonacci number.

Input Format:
The first and only line of input contains a positive number - N.

Output Format:
Print the Nth fibonacci number.

Constraints:
0 <= N <= 20

TEST CASE EXAMPLE:
---------------------------
Input:
4

Output:
3

Explanation:
The fibonacci series:
0, 1, 1, 2, 3, 5, 8,......
At 4th position, we have 3.

PROGRAM:
-----------------------------
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int a = 0, b = 1;
        int n = sc.nextInt();

        for(int i=0;i<n;i++){
            int c = a+b;
            a = b;
            b = c;
        }

        System.out.println(a);
    }
}

26. Number of Multiples
--------------------------------------
Given a positive integer - N. Print the number of multiples of 3, 5 between [1, N].

Input Format:
The first and only line of input contains a positive integer - N.

Output Format:
Print the number of multiples of 3, 5 between [1, N].

Constraints:
1 <= N <= 1018

TEST CASE EXAMPLE:
-----------------------------
Input:
12

Output:
6

Explanation:
Multiples of 3 and 5 in range of 1 to 12 are 3, 5, 6, 9, 10, 12.

PROGRAM:
-------------------------------
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);

        try{
            long n = sc.nextLong();
            long c = n/3+n/5-n/15;
            System.out.println(c);
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
    }
}

27. Natural Numbers Sum
-------------------------------
Given positive integer - N, print the sum of the first N natural numbers.

Input Format:
The first and only line of input contains a positive integer - N.

Output Format:
Print the sum of the first N natural numbers.

Constraints:
1 <= N <= 109

TEST CASE EXAMPLE:
----------------------------
Input:
4

Output:
10

Explanation:
Self Explanatory

PROGRAM:
-------------------------------------
import java.io.*;
import java.util.*;
public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        long n = sc.nextLong();
        System.out.println(n*(n+1)/2);
    }
}

28. Armstrong Number
------------------------------------------
Given an integer N, check whether it's an Armstrong number or not.
Note that an Armstrong number is a number that is equal to the sum of cubes of its digits.

Input Format:
The first and only line of input contains an integer - N.

Output Format:
Print "Yes" if the number is Armstrong number, "No" otherwise.

Constraints:
0 <= N <= 109

TEST CASE EXAMPLE:
---------------------------------
Input:
153

Output:
Yes

Explanation:
13 + 53 + 33 = 153

PROGRAM:
-------------------------------------------
PYTHON:
--------------------------------
n = input()
res = int(sum([int(x)**3 for x in n]))
# print(type(res))
if int(n) == res:
    # print(sum([int(x)**3 for x in n]))
    print("Yes")
else:
    # print(sum([int(x)**3 for x in n]))
    print("No")

29. Narcissistic Numbers
---------------------------------------------------
Given an integer N, check whether it is a Narcissistic number or not.
Note that a Narcissistic number is a number that is the sum of its own digits each raised to the power of the number of digits

Input Format:
The first and only line of input contains an integer - N.

Output Format:
Print "Yes" if the number is Narcissistic number, "No" otherwise.

Constraints:
0 <= N <= 109

TEST CASE EXAMPLE:
----------------------------
Input:
8208

Output:
Yes

Explanation:
84 + 24 + 04 + 84 = 8208

PROGRAM:
---------------------------
PYTHON:
----------------------------------
n = input()
res = sum([int(x)**len(n) for x in n])
if res == int(n):
    print("Yes")
else:
    print("No")

30. Harshad Numbers
--------------------------------
Given an integer N, check whether it is a Harshad number or not.
Note that a Harshad number is an integer, that is divisible by the sum of its digits.

Input:
The first and only line of input contains a integer - N.

Output:
Print "Yes" if the number is Harshad number, "No" otherwise.

Constraints:
1 <= N <= 109

TEST CASE EXAMPLE:
----------------------
Input:
18

Output:
Yes

Explanation:
18 / (1 + 8) = 2
As 18 is divisible by the sum of its digits, it is a Harshad number.

PROGRAM:
---------------------------
PYTHON:
-------------------
n = input()
x = int(n)
y = sum([int(i) for i in n])

if x%y == 0:
    print("Yes")
else:
    print("No")

31. Prime or Not
---------------------------------
Given a positive integer - N, check whether the number is prime or not.

Input Format:
The first and only line of input contains an integer - N.

Output Format:
Print "Yes" if the number is prime, "No" otherwise.

Constraints:
1 <= N <= 108

TEST CASE EXAMPLE:
----------------------------------
Input:
11

Output:
Yes

Explanation:
Self Explanatory

PROGRAM:
----------------------------
import java.io.*;
import java.util.*;
public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        if(n == 1){
            System.out.println("No");
            return;
        }
        for(int i = 2; i*i <= n;i++){
            if(n>2 && n%i == 0){
                System.out.println("No");
                return;
            }
        }
        System.out.println("Yes");
    }
}

32.  Number Reverse
--------------------------------
Given a number N, reverse the number.

Input Format:
The first and only line of input contains a integer - N.

Output Format:
Print the reversed number.

Constraints:
-1018 <= N <= 1018

TEST CASE EXAMPLE:
------------------------
Input:
1344

Output:
4431

Explanation:
Self Explanatory

PROGRAM:
-------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        long n = sc.nextLong();
        long t = n;
        long res = 0;
        if(n<0) n*=-1;
        while(n>0){
            res = res*10 + n%10;
            n/=10;
        }

        if(t<0)
        System.out.println(res*-1);
        else
        System.out.println(res);
    }
}

33. Floyd Pattern - 1
---------------------------------------------
Print a right-angled triangle pattern using integers. See the example for more details.

Input Format:
The first and only line of input contains a single integer N - the size of the triangle.

Output Format:
For the given integer, print the right-angled triangle pattern.

Constraints:
1 <= N <= 50

TEST CASE EXAMPLE:
--------------------------------
Input:
6

Output:
1
2 3
4 5 6
7 8 9 10
11 12 13 14 15
16 17 18 19 20 21

Explanation:
Self Explanatory

PROGRAM:
-------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = 1;
        for(int i = 0;i<n;i++){
            for(int j = 0;j<=i;j++){
                System.out.print(k+" ");
                k++;
            }
            System.out.println();
        }
    }
}

34. Floyd Pattern - 2
-----------------------
Print a right-angled triangle pattern. See the example for more details.

Input Format:
The first and only line of input contains a single integer N - the size of the triangle.

Output Format:
For the given integer, print the right-angled triangle pattern.

Constraints:
1 <= N <= 50

TEST CASE EXAMPLE:
--------------------------
Input:
5

Output:
1
2 6
3 7 10
4 8 11 13
5 9 12 14 15

Explanation:
Self Explanatory

PROGRAM:
----------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        int k = 1;

        for(int i=0;i<n;i++){
            k=i+1;
            for(int j=0;j<=i;j++){
                System.out.print(k+" ");
                k = k+n-j-1;
            }
            System.out.println();
        }
    }
}

35. Hollow Rectangle
---------------------------------------------
Print a hollow rectangle pattern using '*'. See the example for more details.

Input Format:
The input contains two integers W - width of the rectangle and L - length of the rectangle.

Output Format:
For the given integers W and L, print the hollow rectangle pattern.

Constraints:
2 <= W <= 50
2 <= L <= 50

TEST CASE EXAMPLE:
--------------------------
Input:
5 4

Output:
*****
*     *
*     *
*****

Explanation:
Self Explanatory

PROGRAM:
----------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int l = sc.nextInt();
        int b = sc.nextInt();

        for(int i=0;i<l;i++){
            System.out.print("*");
        }

            System.out.println();
        for(int i = 0;i<b-2;i++){
            System.out.print("*");
            for(int j=0;j<l-2;j++){
                System.out.print(" ");
            }
            System.out.print("*");
            System.out.println();
        }

        for(int i=0;i<l;i++){
            System.out.print("*");
        }
    }
}

36. Half Diamond
-----------------------------------
Print half diamond pattern using '*'. See the example for more details.

Input Format:
The first and only line of input contains a single integer N.

Output Format:
For the given integer, print the half-diamond pattern.

Constraints:
1 <= N <= 50

TEST CASE EXAMPLE:
------------------------------
Input:
5

Output:
*
**
***
****
*****
****
***
**
*

Explanation
Self Explanatory

PROGRAM:
---------------------------------
PYTHON:
----------------------------
n = int(input())

for i in range(n):
    print('*'*(i+1))

for i in range(n-1):
    print('*'*(n-i-1))

37. Rectangle Pattern
-------------------------------------
Print rectangle pattern. See the example for more details.

Input Format:
The first and only line of input contains a single integer N.

Output Format:
For the given integer, print a rectangle pattern as shown in the example.

Constraints:
1 <= N <= 50

TEST CASE EXAMPLE:
----------------------------
Input:
5

Output:
5432*
543*1
54*21
5*321
*4321

Explanation
Self Explanatory

PROGRAM:
----------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        for(int i=0;i<n;i++){
            int k = n;
            for(int j=0;j<n;j++){
                if(k == i+1){
                    System.out.print("*");
                }else{
                    System.out.print(k);
                }
                k--;
            }
            System.out.println();
        }
    }
}


38.  Pyramid Pattern
-------------------------------------
Print pyramid pattern using '*'. See the example for more details.

Input Format:
The first and only line of input contains a single integer N - the size of the pyramid.

Output Format:
For the given integer, print the pyramid pattern.

Constraints:
1 <= N <= 50

TEST CASE EXAMPLE:
-------------------------
Input:
5

Output:
    *
   ***
  *****
 *******
*********

Explanation:
Self Explanatory



PROGRAM:
--------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k=1;
        for(int i=0;i<n;i++){
            for(int j = 0;j<n-i-1;j++){
                System.out.print(" ");
            }
            for(int j = 0;j<i+k;j++){
                System.out.print("*");
            }
            k++;
            System.out.println();
        }
    }
}

39.  Inverted Pyramid
-------------------------------------
Print a hollow half-inverted pyramid pattern using '*'. See the example for more details.

Input Format:
The first and only line of input contains a single integer N.

Output Format:
For the given integer, print hollow half-inverted pyramid pattern.

Constraints:
1 <= N <= 50

TEST CASE EXAMPLE:
------------------------
Input:
5

Output:
* * * * *
*     *
*   *
* *
*

Explanation
Self Explanator

PROGRAM:
-----------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        for(int i=0;i<n;i++) System.out.print("* ");
        System.out.println();
        int k=2;
        for(int i=0;i<n-2;i++){
            System.out.print("*");
            for(int j = 0;j<(n*2)-k-3;j++){
                System.out.print(" ");
            }
            k+=2;
            System.out.println("*");
        }
        if(n>1)
        System.out.println("*");
    }
}

40. Palindromic Pattern
------------------------------------
Print a palindromic right-angled triangle pattern using characters. See the example for more details.

Input Format:
The first and only line of input contains an integer N - the size of the pattern.

Output Format:
For the given integer N, print the palindromic right-angled triangle pattern.

Constraints:
1 <= N <= 26

TEST CASE EXAMPLE:
------------------------------
Input:
5

Output:
A
A B A
A B C B A
A B C D C B A
A B C D E D C B A

Explanation:
Self Explanatory

PROGRAM:
------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i=0;i<n;i++){
            StringBuilder sb = new StringBuilder();
            char ch = 'A';
            for(int j = 0;j<=i;j++){
                System.out.print((char)(65+j)+" ");
                sb.append((char)(65+j)+" ");
                
            }
                if(i>0){
                    // System.out.print(i);
                    sb.deleteCharAt(sb.length()-1);
                    sb.deleteCharAt(sb.length()-1);
                    sb.deleteCharAt(sb.length()-1);
                    System.out.print(sb.reverse());
                }
            System.out.println();
        }
    }
}

41.Multiplication Table
--------------------------------
Print the multiplication table for the given integer - N.

Input Format:
First and only line of input contains a single integer N.

Output Format:
Print multiplication table for given integer N.

Constraints:
-105 <= N <= 105

TEST CASE EXAMPLE:
--------------------------------
Input:
9

Output:
9 * 1 = 9
9 * 2 = 18
9 * 3 = 27
9 * 4 = 36
9 * 5 = 45
9 * 6 = 54
9 * 7 = 63
9 * 8 = 72
9 * 9 = 81
9 * 10 = 90

Explanation:
Self Explanatory

PROGRAM:
------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i=1;i<=10;i++){
            System.out.printf("%d * %d = %d\n",n,i,n*i);
        }
    }
}

42. Reverse String
-----------------------------------------
Given a string, reverse the given string in place and then print it.

Note:
Do not use any inbuilt functions / libraries for your main logic.

Input Format
The input contains a string S, consisting of ASCII characters.

Output Format:
Print the reversed string.

Constraints:
1 <= len(s) <= 100

TEST CASE EXAMPLE:
--------------------------
Input:
smart

Output:
trams

Explanation:
Self Explanatory

PROGRAM:
------------------------------
PYTHON:
--------------------------
n = input()
print(n[::-1])

43. Odd Even Index
---------------------------------
Given a string, print all the letters present at the odd index, followed by the letters present at the even index.

Input Format:
The input contains a string S, consisting of ASCII characters.

Output Format:
Print letters present at odd index, followed by the letters present at even index.

Constraints:
1 <= len(S) <= 100

TEST CASE EXAMPLE:
-------------------------
Input:
afdg5tg

Output:
fgtad5g

Explanation:
Self Explanatory

PROGRAM:
----------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        for(int i = 0;i<str.length();i++){
            if(i%2!=0)  System.out.print(str.charAt(i));
        }
        for(int i = 0;i<str.length();i++){
            if(i%2==0)  System.out.print(str.charAt(i));
        }
    }
}

44. Character Frequency
------------------------------
Given a sentence S and a character k, count the occurrence of the given character in the sentence.

Input Format:
The first line of input contains a sentence - S and the second line of input contains a single lowercase character - k.

Output Format:
Print the count of the given character in the sentence.

Constraints:
1 <= len(S) <= 100
'a' <= k <= 'z'

TEST CASE EXAMPLE:
-----------------------------------
Input:
Data Structures & Algorithms
s

Output:
2

Explanation
Self Explanatory

PROGRAM:
--------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        // sc.nextLine();
        String c = sc.nextLine();
        char x = c.charAt(0);
        int count=0;
        for(int i=0;i<str.length();i++){
            char ch = str.charAt(i);
            if(ch == x) count++;
        }
        System.out.println(count);
    }
}

45. Only Vowels
------------------------------
Given a string, check if it contains only vowels.

Input Format:
Input contains a string S, consisting of lowercase and uppercase characters.

Output Format:
Print "Yes" if the string contains only vowels, "No" otherwise.

Constraints:
1 <= len(S) <= 100

TEST CASE EXAMPLE:
----------------------------
Input:
AIEEE

Output:
Yes

Explanation:
Self Explanatory

PROGRAM:
---------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();

        if(str.matches("[aieouAEIOU]+")) System.out.println("Yes");
        else System.out.println("No");
    }
}

46. Digit String
------------------------------------------
Given a string, check if it contains only digits.

Input Format:
The input contains a string S, consisting of ASCII characters.

Output Format:
Print "Yes" if the string contains only digits, and "No" otherwise.

Constraints:
1 <= len(S) <= 100

TEST CASE EXAMPLE:
-------------------------
Input:
123456786543

Output:
Yes

Explanation
Self Explanatory

PROGRAM:
----------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        if(str.matches("[0-9]+")) System.out.println("Yes");
        else System.out.println("No");
    }
}

47. Vowels and Consonants
-----------------------------------
Given a string, print the count of vowels and consonants in the string.

Input Format:
Input contains a string S, consisting of lowercase and uppercase characters.

Output Format:
Print the count of vowels and consonants in the given string, separated by space.

Constraints:
1 <= len(S) <= 100

TETS CASE EXAMPLE:
--------------------------
Input:
abxbbiAaspw

Output:
4 7

Explanation:
Self Explanatory

PROGRAM:
------------------------------[
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        String cpy1 = str,cpy2 = str;

        int len1 = cpy1.replaceAll("[^aeiouAEIOU]","").length();
        int len2 = cpy2.replaceAll("[aeiouAEIOU]","").length();
        System.out.println(len1+" "+len2);

    }
}

48. Letter Coverage
------------------------------------------
Given a string, check if it contains all the letters of the alphabet.

Input Format:
Input contains a string S, consisting of lowercase and uppercase characters.

Output Format:
Print "Yes" if the string contains all the letters of the alphabet, and "No" otherwise.

Constraints:
1 <= len(S) <= 100

TEST CASE EXAMPLE:
-------------------------
Input:
askhtwsflkqwertYuioPasdfghjklZxcvbnm

Output:
Yes

Explanation:
Self Explanatory

PROGRAM:
--------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        if(check(str.toLowerCase())) System.out.println("Yes");
        else System.out.println("No");
    }

    private static boolean check(String str){
        Map<Character,Integer> map = new HashMap<>();
        for(int i=0;i<str.length();i++){
            char ch = str.charAt(i);
            if(map.containsKey(ch)) map.put(ch,map.get(ch)+1);
            else map.put(ch,1);
        }

        for(char ch = 'a';ch<='z';ch++){
            if(!map.containsKey(ch)) return false;
        }

        return true;
    }
}

49. Toggle Case
----------------------------------
Given a string, toggle the case of each character in the given string.

Input Format:
The first and only input line contains a string S, consisting of lowercase and uppercase characters.

Output Format:
Print the toggled string.

Constraints:
1 <= len(S) <= 100

TEST CASE EXAMPLE:
---------------------------
Input:
sMaRtInTeRvIeWs

Output:
SmArTiNtErViEwS

Explanation:
Self Explanatory

PROGRAM:
---------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        String res = "";
        for(int i=0;i<str.length();i++){
            char ch = str.charAt(i);
            if(Character.isLowerCase(ch)) res+=(""+ch).toUpperCase();
            else if(!Character.isLowerCase(ch)) res+=(""+ch).toLowerCase();
        }


        System.out.println(res);

    }
}

50. Compress String
-----------------------------------
Given a string, compress the given string. See the example for more details.

Input Format:
Input contains a string S, consisting of lowercase and uppercase characters.

Output Format:
Print the compressed string.

Constraints:
1 <= len(S) <= 100

TEST CASES:
-------------------------------------
Input:
aaabbbbhhheaaAsssssss

Output:
a3b4h3e1a2A1s7

Explanation:
In the given string, a is repeating for 3 times - after compression a3.
Similarly,
b is repeating for 4 times - b4
h is repeating for 3 times - h3
e is repeating for 1 time - e1
a is repeating for 2 times - a2
A is repeating for 1 time - A1
s is repeating 7 times - s7

PROGRAM:
--------------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        int c = 1;
        for(int i=1;i<str.length();i++){
            char ch = str.charAt(i),ch0 = str.charAt(i-1);
            if(ch == ch0) c++;
            else{
                System.out.print(ch0+""+c);
                c=1;
            }
        }
        System.out.println(str.charAt(str.length()-1)+""+c);
    }
}

51. Longest Prefix Suffix
--------------------------------------
Given a string, compute the length of the longest proper prefix which is same as the suffix of the given string.

Input Format:
The input contains a string S, consisting of only lowercase characters.

Output Format:
Print the length of the longest proper prefix which is the same as a suffix of the given string.

Constraints:
1 <= len(S) <= 100

TEST CASE EXAMPLE:
-------------------------------
Input:
smartintsmart

Output:
5

Explanation:
Self Explanatory


PROGRAM:
----------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        int c = 0;
        int maxC = 0;
        for(int i=1;i<str.length();i++){
            String sub = str.substring(0,i);
            if(str.endsWith(sub)){
                c = i;
            }else{
                maxC = Math.max(c,maxC);
            }
        }
        maxC = Math.max(c,maxC);
        System.out.println(maxC);
    }
}

52. Linear Search
----------------------------------------------
Given an array of integers, search a given key in the array using linear search.
Note: Do not use any inbuilt functions / libraries for your main logic.

Input Format:
The first line of input contains two integers N and K. N is the size of the array and K is the key. The second line contains the elements of the array.

Output Format:
If the key is found, print the index of the array, otherwise print -1.

Constraints:
1 <= N <= 102
0 <= ar[i] <= 109

TEST CASE EXAMPLE:
--------------------------
Input:
5 15
-2 -19 8 15 4

Output:
3

Explanation:
Self Explanatory

PROGRAM:
------------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int key = sc.nextInt();
        int[] arr = new int[n];
        // boolean found = false;

        for(int i=0;i<n;i++){
            arr[i] = sc.nextInt();
            if(arr[i] == key){
                System.out.println(i);
                return;
            }
        }

        

        System.out.println(-1);

    }
}

53. Binary Search
------------------------------------------
Given a sorted array of integers, search a given key in the array using Binary Search.
(Try to practice both iterative and recursive codes for Binary Search)
Note: Do not use any inbuilt functions / libraries for your main logic.

Input Format:
The first line of input contains two integers N and K. N is the size of the array and K is the key. The second line contains the elements of the array.

Output Format:
Print "true" if key is present in the array, otherwise, print false.

Constraints:
1 <= N <= 102
0 <= ar[i] <= 109

TEST CASE EXAMPLE:
----------------------------
Input:
5 19
2 19 23 35 38

Output:
true

Explanation:
Self Explanatory

PROGRAM:
------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Main. */
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int key = sc.nextInt();

        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            arr[i] = sc.nextInt();
        }

        int x = binarySearch(arr,0,n-1,key);
        if(x!=-1) System.out.println("true");
        else System.out.println("false");
    }

    private static int binarySearch(int[] arr, int low,int high, int key){
        if(low<=high){
            int mid = (low+high)/2;
            if(arr[mid] < key){
                return binarySearch(arr,mid+1,high,key);
            }else if(arr[mid] > key){
                return binarySearch(arr,0,mid,key);
            }else if(arr[mid] == key) return arr[mid];
        }

        return -1;
    }
}
